import { Injectable, UnauthorizedException } from '@nestjs/common';
import { UserRepository } from './repository/user.repository';
import { AuthCreadentialDto } from './dto/auth.credential.dto';
import { UserCredentialDto } from './dto/user.credential.dto';
import * as bcrypt from 'bcryptjs';
import { DataSource, Entity, Repository } from 'typeorm';

@Injectable()
export class AuthService {
    constructor(
        private dataSource: DataSource,
        private userRepository: UserRepository,
    ) { }

    async signUp(authCredentialDto: AuthCreadentialDto): Promise<void> {
        try{
            await this.userRepository.createUser(authCredentialDto);
            await this.create(authCredentialDto.companyName);
        }catch(error){

        }
        // await this.createStudentRepository.createNewEntity(authCredentialDto);
    }

    async signIn(userCredentialDto: UserCredentialDto): Promise<string> {
        const { userName, password } = userCredentialDto;
        const user = await this.userRepository.findOne({ where: { userName: userName } });

        if(user && ( await bcrypt.compare(password, user.password))) {
            // User token generated by ( Secret + Payload )
            return "Login Success";
        }else{
            throw new UnauthorizedException();
        }
    }

    async create(dynamicTableName) {
        // const entity = this.dataSource.createEntityManager().create(StudentEntity);
        // const repo = await this.getRepository(StudentEntity);
        // repo.metadata.tableName = dynamicTableName;
        this.dataSource.manager.query(`CREATE TABLE ${dynamicTableName} (id SERIAL PRIMARY KEY,userName VARCHAR(20) UNIQUE NOT NULL,companyName VARCHAR(20) NOT NULL,myNumber VARCHAR(20) UNIQUE NOT NULL,parentNumber VARCHAR(20) NOT NULL)`)
        
    }
}
