import { Injectable, UnauthorizedException } from '@nestjs/common';
import { UserRepository } from './repository/user.repository';
import { AuthCreadentialDto } from './dto/auth.credential.dto';
import { UserCredentialDto } from './dto/user.credential.dto';
import * as bcrypt from 'bcryptjs';
import { DataSource } from 'typeorm';
import { JwtService } from '@nestjs/jwt';
import * as AWS from 'aws-sdk';

@Injectable()
export class AuthService {
    constructor(
        private userRepository: UserRepository,
        private jwtService: JwtService,
    ) { }

    async signUp(authCredentialDto: AuthCreadentialDto): Promise<void> {
        await this.userRepository.createUser(authCredentialDto);
    }

    async signIn(userCredentialDto: UserCredentialDto): Promise<{ accessToken: string }> {
        // Make sign and match with company name and Make companyName to Unique parameter
        const { userName, password } = userCredentialDto;
        const user = await this.userRepository.findOne({ where: { userName: userName } });

        if (user && (await bcrypt.compare(password, user.password))) {
            // User token generated by ( Secret + Payload )
            const payload = {userName: userName};
            const accessToken = this.jwtService.sign(payload);

            return { accessToken: accessToken };
        } else {
            throw new UnauthorizedException('Login failed!');
        }
    }
}
