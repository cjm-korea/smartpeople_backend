import { Injectable, UnauthorizedException } from '@nestjs/common';
import { UserRepository } from './repository/user.repository';
import { AuthCreadentialDto } from './dto/auth.credential.dto';
import { UserCredentialDto } from './dto/user.credential.dto';
import * as bcrypt from 'bcryptjs';
import { InjectRepository } from '@nestjs/typeorm';
import { createStudentEntity } from 'src/entities/createStudent.entity';
import { Repository } from 'typeorm';
import { StudentEntity } from 'src/entities/student.entity';
import { CreateStudentRepository } from './repository/createStudent.repository';

@Injectable()
export class AuthService {
    constructor(
        private userRepository: UserRepository,
        private createStudentRepository: CreateStudentRepository
    ) { }

    async signUp(authCredentialDto: AuthCreadentialDto): Promise<void> {
        await this.userRepository.createUser(authCredentialDto);
        await this.createStudentRepository.createNewEntity(authCredentialDto);
    }

    async signIn(userCredentialDto: UserCredentialDto): Promise<string> {
        const { userName, password } = userCredentialDto;
        const user = await this.userRepository.findOne({ where: { userName: userName } });

        if(user && ( await bcrypt.compare(password, user.password))) {
            // User token generated by ( Secret + Payload )
            return "Login Success";
        }else{
            throw new UnauthorizedException();
        }
    }
}
